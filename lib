local MatexLib = {}

function MatexLib:CreateWindow(title)
	local player = game.Players.LocalPlayer
	local playerGui = player:WaitForChild("PlayerGui")

	local MatexUI = Instance.new("ScreenGui")
	MatexUI.Name = "MatexUI"
	MatexUI.ResetOnSpawn = false
	MatexUI.Parent = playerGui

	local Main = Instance.new("Frame")
	Main.Size = UDim2.new(0, 600, 0, 400)
	Main.Position = UDim2.new(0, 150, 0, 100)
	Main.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
	Main.BorderSizePixel = 0
	Main.AnchorPoint = Vector2.new(0.5, 0.5)
	Main.Name = "Main"
	Main.Parent = MatexUI
        Main.Draggable = true

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Bottom-left container
local UserInfoFrame = Instance.new("Frame")
UserInfoFrame.Name = "UserInfo"
UserInfoFrame.Size = UDim2.new(0, 200, 0, 60)
UserInfoFrame.Position = UDim2.new(0, 10, 1, -70)
UserInfoFrame.BackgroundTransparency = 1
UserInfoFrame.ZIndex = 3
UserInfoFrame.Parent = Main

-- Avatar Image
local Avatar = Instance.new("ImageLabel")
Avatar.Name = "Avatar"
Avatar.Size = UDim2.new(0, 50, 0, 50)
Avatar.Position = UDim2.new(0, 0, 0, 5)
Avatar.BackgroundTransparency = 1
Avatar.Image = "https://www.roblox.com/headshot-thumbnail/image?userId="..LocalPlayer.UserId.."&width=150&height=150&format=png"
Avatar.Parent = UserInfoFrame

-- Username Label
local Username = Instance.new("TextLabel")
Username.Name = "Username"
Username.Size = UDim2.new(0, 130, 0, 50)
Username.Position = UDim2.new(0, 60, 0, 5)
Username.BackgroundTransparency = 1
Username.Text = LocalPlayer.Name
Username.TextColor3 = Color3.fromRGB(255, 255, 255)
Username.TextXAlignment = Enum.TextXAlignment.Left
Username.Font = Enum.Font.GothamBold
Username.TextSize = 16
Username.Parent = UserInfoFrame

	local UICorner = Instance.new("UICorner", Main)
	UICorner.CornerRadius = UDim.new(0, 8)

	local Title = Instance.new("TextLabel")
	Title.Text = title or "Matex UI"
	Title.Size = UDim2.new(1, 0, 0, 40)
	Title.BackgroundTransparency = 1
	Title.TextColor3 = Color3.fromRGB(255, 255, 255)
	Title.Font = Enum.Font.GothamBold
	Title.TextSize = 20
	Title.Parent = Main

	local TabsFrame = Instance.new("ScrollingFrame")
	TabsFrame.Size = UDim2.new(0, 150, 1, -40)
	TabsFrame.Position = UDim2.new(0, 0, 0, 40)
	TabsFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
	TabsFrame.ScrollBarThickness = 4
	TabsFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	TabsFrame.Name = "TabsFrame"
	TabsFrame.Parent = Main

	local UIListLayout = Instance.new("UIListLayout", TabsFrame)
	UIListLayout.Padding = UDim.new(0, 5)
	UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder

	local TabHolder = Instance.new("Frame")
	TabHolder.Size = UDim2.new(1, -150, 1, -40)
	TabHolder.Position = UDim2.new(0, 150, 0, 40)
	TabHolder.BackgroundTransparency = 1
	TabHolder.Name = "TabHolder"
	TabHolder.Parent = Main

	local Tabs = {}

	local function CreateTab(tabName)
		local TabButton = Instance.new("TextButton")
		TabButton.Size = UDim2.new(1, -10, 0, 30)
		TabButton.Position = UDim2.new(0, 5, 0, 0)
		TabButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
		TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
		TabButton.Font = Enum.Font.Gotham
		TabButton.TextSize = 16
		TabButton.Text = tabName
		TabButton.Name = tabName
		TabButton.Parent = TabsFrame

		local UICorner = Instance.new("UICorner", TabButton)
		UICorner.CornerRadius = UDim.new(0, 6)

		local ContentFrame = Instance.new("ScrollingFrame")
		ContentFrame.Size = UDim2.new(1, 0, 1, 0)
		ContentFrame.BackgroundTransparency = 1
		ContentFrame.Visible = false
		ContentFrame.ScrollBarThickness = 6
		ContentFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
		ContentFrame.Name = tabName .. "_Content"
		ContentFrame.Parent = TabHolder

		local ContentLayout = Instance.new("UIListLayout", ContentFrame)
		ContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
		ContentLayout.Padding = UDim.new(0, 6)

		TabButton.MouseButton1Click:Connect(function()
			for _, tab in pairs(TabHolder:GetChildren()) do
				if tab:IsA("ScrollingFrame") then
					tab.Visible = false
				end
			end
			ContentFrame.Visible = true
		end)

		local TabAPI = {}

		function TabAPI:CreateButton(text, callback)
			local Button = Instance.new("TextButton")
			Button.Size = UDim2.new(1, -10, 0, 30)
			Button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
			Button.TextColor3 = Color3.fromRGB(255, 255, 255)
			Button.Font = Enum.Font.Gotham
			Button.TextSize = 14
			Button.Text = text
			Button.Name = text
			Button.Parent = ContentFrame

			local corner = Instance.new("UICorner", Button)
			corner.CornerRadius = UDim.new(0, 4)

			Button.MouseButton1Click:Connect(function()
				pcall(callback)
			end)

			return Button
		end

		function TabAPI:CreateTextbox(placeholder, callback)
			local Box = Instance.new("TextBox")
			Box.Size = UDim2.new(1, -10, 0, 30)
			Box.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
			Box.TextColor3 = Color3.fromRGB(255, 255, 255)
			Box.PlaceholderText = placeholder or "Enter text..."
			Box.Text = ""
			Box.Font = Enum.Font.Gotham
			Box.TextSize = 14
			Box.ClearTextOnFocus = false
			Box.Parent = ContentFrame

			local corner = Instance.new("UICorner", Box)
			corner.CornerRadius = UDim.new(0, 4)

			Box.FocusLost:Connect(function(enterPressed)
				if enterPressed and callback then
					pcall(callback, Box.Text)
				end
			end)

			return Box
		end

		function TabAPI:CreateToggle(text, default, callback)
			local Toggle = Instance.new("TextButton")
			Toggle.Size = UDim2.new(1, -10, 0, 30)
			Toggle.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
			Toggle.TextColor3 = Color3.fromRGB(255, 255, 255)
			Toggle.Font = Enum.Font.Gotham
			Toggle.TextSize = 14
			Toggle.Text = "[ OFF ] " .. text
			Toggle.Name = text
			Toggle.Parent = ContentFrame

			local toggled = default or false
			if toggled then
				Toggle.Text = "[ ON ] " .. text
			end

			local corner = Instance.new("UICorner", Toggle)
			corner.CornerRadius = UDim.new(0, 4)

			Toggle.MouseButton1Click:Connect(function()
				toggled = not toggled
				Toggle.Text = (toggled and "[ ON ] " or "[ OFF ] ") .. text
				pcall(callback, toggled)
			end)

			return Toggle
		end

		function TabAPI:CreateLabel(text)
			local Label = Instance.new("TextLabel")
			Label.Size = UDim2.new(1, -10, 0, 25)
			Label.BackgroundTransparency = 1
			Label.TextColor3 = Color3.fromRGB(200, 200, 200)
			Label.Font = Enum.Font.Gotham
			Label.TextSize = 13
			Label.TextXAlignment = Enum.TextXAlignment.Left
			Label.Text = text
			Label.Name = text
			Label.Parent = ContentFrame

			return Label
		end

		ContentFrame.ChildAdded:Connect(function()
			task.wait()
			ContentFrame.CanvasSize = UDim2.new(0, 0, 0, ContentLayout.AbsoluteContentSize.Y + 10)
		end)

function TabAPI:CreateSlider(text, min, max, default, callback)
			local Label = Instance.new("TextLabel")
			Label.Size = UDim2.new(1, -10, 0, 20)
			Label.BackgroundTransparency = 1
			Label.TextColor3 = Color3.fromRGB(200, 200, 200)
			Label.Font = Enum.Font.Gotham
			Label.TextSize = 14
			Label.TextXAlignment = Enum.TextXAlignment.Left
			Label.Text = text .. ": " .. tostring(default)
			Label.Parent = ContentFrame

			local SliderFrame = Instance.new("Frame")
			SliderFrame.Size = UDim2.new(1, -10, 0, 20)
			SliderFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
			SliderFrame.Parent = ContentFrame

			local Bar = Instance.new("Frame")
			Bar.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
			Bar.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
			Bar.BorderSizePixel = 0
			Bar.Parent = SliderFrame

			local corner = Instance.new("UICorner", SliderFrame)
			corner.CornerRadius = UDim.new(0, 4)
			Instance.new("UICorner", Bar).CornerRadius = UDim.new(0, 4)

			local dragging = false
			local function Update(input)
				local pos = UDim2.new(math.clamp((input.Position.X - SliderFrame.AbsolutePosition.X) / SliderFrame.AbsoluteSize.X, 0, 1), 0, 1, 0)
				local value = math.floor((min + (max - min) * pos.X.Scale) + 0.5)
				Bar.Size = UDim2.new(pos.X.Scale, 0, 1, 0)
				Label.Text = text .. ": " .. tostring(value)
				pcall(callback, value)
			end

			SliderFrame.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					dragging = true
					Update(input)
				end
			end)

			SliderFrame.InputEnded:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					dragging = false
				end
			end)

			game:GetService("UserInputService").InputChanged:Connect(function(input)
				if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
					Update(input)
				end
			end)

			return SliderFrame
		end

		function TabAPI:CreateDropdown(text, options, callback)
			local Button = Instance.new("TextButton")
			Button.Size = UDim2.new(1, -10, 0, 30)
			Button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
			Button.TextColor3 = Color3.fromRGB(255, 255, 255)
			Button.Font = Enum.Font.Gotham
			Button.TextSize = 14
			Button.Text = text .. " â–¼"
			Button.Parent = ContentFrame

			local corner = Instance.new("UICorner", Button)
			corner.CornerRadius = UDim.new(0, 4)

			local Frame = Instance.new("Frame")
			Frame.Size = UDim2.new(1, -10, 0, #options * 30)
			Frame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
			Frame.Visible = false
			Frame.Parent = ContentFrame

			local layout = Instance.new("UIListLayout", Frame)
			layout.Padding = UDim.new(0, 2)

			Button.MouseButton1Click:Connect(function()
				Frame.Visible = not Frame.Visible
			end)

			for _, option in ipairs(options) do
				local Opt = Instance.new("TextButton")
				Opt.Size = UDim2.new(1, 0, 0, 30)
				Opt.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
				Opt.TextColor3 = Color3.fromRGB(255, 255, 255)
				Opt.Font = Enum.Font.Gotham
				Opt.TextSize = 13
				Opt.Text = option
				Opt.Parent = Frame

				Instance.new("UICorner", Opt).CornerRadius = UDim.new(0, 4)

				Opt.MouseButton1Click:Connect(function()
					Button.Text = text .. ": " .. option
					Frame.Visible = false
					pcall(callback, option)
				end)
			end

			return Button
		end

		function TabAPI:CreateKeybind(text, defaultKey, callback)
			local Button = Instance.new("TextButton")
			Button.Size = UDim2.new(1, -10, 0, 30)
			Button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
			Button.TextColor3 = Color3.fromRGB(255, 255, 255)
			Button.Font = Enum.Font.Gotham
			Button.TextSize = 14
			Button.Text = text .. ": " .. defaultKey
			Button.Parent = ContentFrame

			local corner = Instance.new("UICorner", Button)
			corner.CornerRadius = UDim.new(0, 4)

			local binding = false
			local key = defaultKey

			Button.MouseButton1Click:Connect(function()
				Button.Text = text .. ": ..."
				binding = true
			end)

			local UIS = game:GetService("UserInputService")
			UIS.InputBegan:Connect(function(input, gp)
				if gp then return end
				if binding then
					key = input.KeyCode.Name
					Button.Text = text .. ": " .. key
					binding = false
				elseif input.KeyCode.Name == key then
					pcall(callback)
				end
			end)

			return Button
		end

function TabAPI:CreateSection(title)
	local SectionLabel = Instance.new("TextLabel")
	SectionLabel.Size = UDim2.new(1, -10, 0, 25)
	SectionLabel.BackgroundTransparency = 1
	SectionLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	SectionLabel.Font = Enum.Font.GothamBold
	SectionLabel.TextSize = 16
	SectionLabel.TextXAlignment = Enum.TextXAlignment.Left
	SectionLabel.Text = "  " .. title
	SectionLabel.Parent = ContentFrame

	local Divider = Instance.new("Frame")
	Divider.Size = UDim2.new(1, -10, 0, 1)
	Divider.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
	Divider.BorderSizePixel = 0
	Divider.Parent = ContentFrame
end

		Tabs[tabName] = TabAPI
		return TabAPI
	end

	local WindowAPI = {
		CreateTab = CreateTab
	}

	function WindowAPI:Notify(text, duration)
		duration = duration or 3
		local notif = Instance.new("TextLabel")
		notif.Size = UDim2.new(0, 200, 0, 40)
		notif.Position = UDim2.new(1, -210, 1, -50)
		notif.AnchorPoint = Vector2.new(0, 1)
		notif.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
		notif.TextColor3 = Color3.fromRGB(255, 255, 255)
		notif.Font = Enum.Font.GothamBold
		notif.TextSize = 14
		notif.Text = text
		notif.Name = "Notification"
		notif.Parent = MatexUI

		local corner = Instance.new("UICorner", notif)
		corner.CornerRadius = UDim.new(0, 6)

		task.delay(duration, function()
			notif:Destroy()
		end)
	end

	return WindowAPI
end

return MatexLib
